#!/bin/bash

# command to install or uninstall packages
# call format is
# noapm install <package> <package>
# noapm uninstall <package> <package>

_NOAPM_VERSION=0.1.0

# miniconda could be installed in a few places
if [[ -z $MINICONDA_LOCATION ]]; then
    if [[ -d $HOME/.miniconda3 ]]; then
        MINICONDA_LOCATION=$HOME/.miniconda3
    elif [[ -d $HOME/.local/bin/miniconda3 ]]; then
        MINICONDA_LOCATION=$HOME/.local/bin/miniconda3
    else
        MINICONDA_LOCATION=$HOME/.miniconda3
    fi
fi
NVM_LOCATION=${NVM_LOCATION:=$HOME/.nvm}

_error() {
    echo -e "\e[31mError: $1\e[0m" >&2
    return 1
}

_error_and_exit() {
    _print_warn_buffer
    _print_info_buffer
    _error "$1"
    exit 1
}

_warn() {
    echo -e "\e[33mWarning: $1\e[0m" >&2
}

_yecho() {
    echo -e "\e[33m$1\e[0m"
}

_gecho() {
    echo -e "\e[32m$1\e[0m"
}

_becho() {
    echo -e "\e[34m$1\e[0m"
}

_omyzsh_is_installed() {
    [[ -d $HOME/.oh-my-zsh ]]
}

_warn_at_end_of_script() {
    # Add the message to a line in a buffer which is yechoed at the end of the script
    # This is useful for warning the user about something which may be important
    # but not fatal to the script
    _WARNINGS_BUFFER="${_WARNINGS_BUFFER}$1\n"
}
_info_at_end_of_script() {
    # Similar to warn_at_end_of_script but for info messages
    _INFO_BUFFER="${_INFO_BUFFER}$1\n"
}

_print_warn_buffer() {
    # call _warn for each line of the buffer
    if [[ -z $_WARNINGS_BUFFER ]]; then
        return 0
    fi
    echo -e $_WARNINGS_BUFFER | while read line; do
        _warn "$line"
    done
}

_print_info_buffer() {
    # call _yecho for each line of the buffer
    if [[ -z $_INFO_BUFFER ]]; then
        return 0
    fi
    echo -e $_INFO_BUFFER | while read line; do
        _yecho "$line"
    done
}

_echo_tool_description() {
    echo "Install or uninstall miscellaneous packages / tools which don't have installation provided simply by a common package manager."
    echo "Also install oh-my-zsh completions for packages if available."
}

_install_omzsh_completions_from_file_or_dir() {
    local PLUGIN_NAME=$1
    local COMPLETION_FILE_OR_DIR=$2
    if _omyzsh_is_installed; then
        local target=$(_plugins_directory)/$PLUGIN_NAME
        rm -rf $target 2> /dev/null
        if [ -f $COMPLETION_FILE_OR_DIR ]; then
            mkdir $target 2> /dev/null
            local target=$target/_$PLUGIN_NAME
        fi
        mv $COMPLETION_FILE_OR_DIR $target \
            && _info_at_end_of_script "To enable the $PLUGIN_NAME completions plugin add '$PLUGIN_NAME' to the plugins variable found in ~/.zshrc" \
            || _warn_at_end_of_script "Failed to install $PLUGIN_NAME completions"
    fi
}

_tmp_omzsh_completions_path() {
    local PACKAGE=$1
    echo /tmp/_noapm_${PACKAGE}-completions
}

_install_omzsh_completion_from_tmp() {
    _install_omzsh_completions_from_file_or_dir $1 $(_tmp_omzsh_completions_path $1)
}

_already_installed() {
    local PACKAGE=$1
    if type "_noapm_${PACKAGE}_is_installed" > /dev/null 2>&1 ; then
        _noapm_${PACKAGE}_is_installed
    else
        which $PACKAGE > /dev/null
    fi  
}

#region PRINTING INFO

_package_is_supported() {
    local PACKAGE=$1
    if type "_noapm_install_${PACKAGE}" > /dev/null 2>&1 ; then
        return 0
    else
        return 1
    fi
}

_print_info_for_package() {
    local PACKAGE=$1

    if _package_is_supported $PACKAGE; then
        for routine in install uninstall configure unconfigure; do
            if _print_info_for_package_routine $PACKAGE $routine > /dev/null 2>&1 ; then
                _becho "$routine info for $PACKAGE:"
                _print_info_for_package_routine $PACKAGE $routine
                echo ""
            fi
        done
    else
        _error "$PACKAGE is not a package supported by this script."
        return 1
    fi
}

iii() { return 0; }  # marker for 'docstring' which will get output to info for a command
_print_iii_lines() {
    # Usage: echo "iii <message>" | _print_iii_lines
    # Here's we're:
    # - removing the iii marker at the beginning
    # - escaping \' to ' and \" to "
    # - removing the ';' at the end of the line
    grep 'iii' | sed 's/iii //g' | sed "s/\\\'/'/g" | sed 's/\\\"/"/g' | sed 's/;$//g'
}


_print_info_for_package_routine() {
    local PACKAGE=$1
    local ROUTINE=$2
    if type "_noapm_${ROUTINE}info_${PACKAGE}" > /dev/null 2>&1 ; then
        _noapm_${ROUTINE}info_${PACKAGE}
    else
        if type "_noapm_${ROUTINE}_${PACKAGE}" > /dev/null 2>&1 ; then
            if type "_noapm_${ROUTINE}_${PACKAGE}" | grep -q 'iii'; then
                # print the lines which have the iii info marker at the beginning (equivalent to printing docstring)
                type "_noapm_${ROUTINE}_${PACKAGE}" | _print_iii_lines
            else
                # Just echo the function definition so the user can see what it does if no iii provided
                echo "Shell commands executed by for ${PACKAGE} ${ROUTINE}:"
                type "_noapm_${ROUTINE}_${PACKAGE}" | grep -v "^_noapm_${ROUTINE}_${PACKAGE}"
            fi
        else
            return 1
        fi
    fi
}

#endregion PRINTING INFO

_help() {
    # NOTE: TODO: Please update the help section of the README whenever this gets changed.

    if [[ -z $_COMMAND ]] || [[ $_COMMAND == "help" ]]; then
        echo "Usage: noapm <install|uninstall> [options] <package> <package> ..."
        echo "Usage: noapm self <command> [options]"
        echo "Usage: noapm [options]"
        _echo_tool_description 
        echo ""
        echo "Options:"
        echo "  --version      Print version"
        echo "  -h, --help     Print this help message"
        echo ""
        echo "See further help for each command with 'noapm <command> --help'"
        echo "Commands:"
        echo "  install        Install packages"
        echo "  uninstall      Uninstall packages"
        echo "  self           Command for managing noapm itself"
        echo "  list           List available packages"
        echo "  info           Print information about how this script will install or uninstall a package"
        echo "  help           Print this help message"
    fi

    case $_COMMAND in
        self)
            echo "Usage: noapm self [options]"
            _echo_tool_description
            echo ""
            echo "Options:"
            echo "  --update       Update noapm"
            ;;
        install)
            echo "Usage: noapm install [options] <package> <package> ..."
            _echo_tool_description
            echo ""
            echo "By default --completions and --configure are enabled"
            echo "Options:"
            echo "  -f, --force      Force install, i.e. don't check if already installed"
            echo "  -y               Some package installers may have interactive prompts which can be subverted with a '-y' flag"
            echo "                   '-y' will be passed to the package installer if it is supported"
            echo "  --completions    Install oh-my-zsh completions for packages if available and oh-my-zsh is installed. (on by default)"
            echo "  --no-completions  Don't install oh-my-zsh completions"
            echo "  --configure      Run any post install configuration defined for a package after installing it (on by default)"
            echo "  --no-configure   Don't run any post install configuration"
            echo ""
            echo "Available packages:"
            for package in $(_get_available_packages); do
                echo "  $package"
            done
            ;;
        uninstall)
            echo "Usage: noapm uninstall [options] <package> <package> ..."
            _echo_tool_description
            echo ""
            echo "By default --configure is enabled"
            echo "Options:"
            echo "  -f, --force      Force uninstall, i.e. don't check if already uninstalled"
            echo "  -y               Some package installers may have interactive prompts which can be subverted with a '-y' flag"
            echo "                   '-y' will be passed to the package installer if it is supported"
            echo "  --configure      Tear down any post install configuration. (on by default)"
            echo "  --no-configure   Don't tear down any post install configuration."
            echo ""
            echo "Available packages:"
            for package in $(_get_available_packages); do
                echo "  $package"
            done
            ;;
        info)
            echo "Usage: noapm info <package>"
            _echo_tool_description
            echo ""
            echo "Print information about how this script will install or uninstall <package>"
            echo ""
            ;;
        list)
            echo "Usage: noapm list"
            _echo_tool_description
            echo ""
            echo "List available packages"
            echo ""
            echo "Available packages:"
            ;;
    esac
}

_get_available_packages() {
    # echo all packages which have a function defined _$package-install
    # or _$package-uninstall

    # get all functions
    declare -F | awk '{print $3}' \
        | grep -E '_noapm_(install|uninstall)_' \
        | sed -E 's/_noapm_(install|uninstall)_//g' \
        | sort | uniq
}

_process_args() {
    # args look like <command> [options] <package> <package> ...
    # This sets the appropriate variables
    # _COMMAND, _INSTALL, _UNINSTALL, _FORCE, _PACKAGES, _COMPLETIONS, _CONFIGURE

    _error_on_unknown_option_accept_help() {
        case $1 in
            -h|--help)
                _help
                exit 0
                ;;
            --*|-*)
                _error "Unknown option $1"
                _help
                exit 1
                ;;
            *)
                # Ignore arguments which are not options
                return 0
                ;;
        esac
    }

    _process_subcommand() {
        _COMMAND=$1
        shift
        case $_COMMAND in
            install)
                _INSTALL=1
                _process_flags_with_package_args_for_install_uninstall $@
                ;;
            uninstall)
                _UNINSTALL=1
                _process_flags_with_package_args_for_install_uninstall $@
                ;;
            self) 
                _SELF=1
                _process_flags_for_self $@
                ;;
            list)
                for package in $(_get_available_packages); do
                    echo "$package"
                done
                return 0
                ;;
            info)
                _process_flags_with_package_args_for_info $@
                for package in $_PACKAGES; do
                    _print_info_for_package $package || exit 1
                done
                exit 0
                ;;
            --version)
                echo $_NOAPM_VERSION
                exit 0
                ;;
            help|-h|--help)
                _COMMAND=help
                _help
                exit 0
                ;;
            *)
                _error "Unknown command $_COMMAND"
                unset _COMMAND  # So that help prints
                _help
                exit 1
                ;;
        esac
        shift
    }

    _process_flags_with_package_args_for_install_uninstall() {
        # args look like [options]<package> <package> ...
        while [[ $# -gt 0 ]]; do
            case $1 in
                -f|--force)
                    _FORCE=1
                    shift
                    ;;
                -y)
                    _Y='-y'
                    shift
                    ;;
                ## --completions for installing oh-my-zsh completions
                --completions)
                    _COMPLETIONS=1
                    shift
                    ;;
                --no-completions)
                    unset _COMPLETIONS
                    shift
                    ;;
                --configure)
                    _CONFIGURE=1
                    shift
                    ;;
                --no-configure)
                    unset _CONFIGURE
                    shift
                    ;;
                --*|-*)
                    _error_on_unknown_option_accept_help $1
                    shift
                    ;;
                *)
                    _PACKAGES=$@
                    return 0
                    ;;
            esac
        done
    }

    _process_flags_with_package_args_for_info() {
        # args look like [options]<package> <package> ...
        while [[ $# -gt 0 ]]; do
            case $1 in
                --*|-*)
                    _error_on_unknown_option_accept_help $1
                    shift
                    ;;
                *)
                    _PACKAGES=$@
                    return 0
                    ;;
            esac
        done
    }

    _process_flags_for_self() {
        while [[ $# -gt 0 ]]; do
            case $1 in
                --update)
                    _UPDATE=1
                    shift
                    ;;
                --*|*-)
                    _error_on_unknown_option_accept_help $1
                    shift
                    ;;
                *)
                    _error "Unknown argument $1"
                    _help
                    exit 1
                    ;;
            esac
        done
    }

    _process_subcommand $@
}


_main() {
    _COMPLETIONS=1 # On by default but may be unset by _process_args
    _CONFIGURE=1 # On by default but may be unset by _process_args
    _process_args $@ # This sets the appropriate variables:
    #  _COMMAND, _INSTALL, _UNINSTALL, _SELF, 
    # _PACKAGES, _FORCE, _COMPLETIONS, _CONFIGURE
    # _UPDATE

    if ! _omyzsh_is_installed; then
        unset _COMPLETIONS
    fi

    case $_COMMAND in
        install)
            if [[ -z $_PACKAGES ]]; then
                _error "No packages specified"
                _help
                exit 1
            fi
            for package in $_PACKAGES; do
                if type "_noapm_install_${package}" > /dev/null 2>&1 ; then
                    if _already_installed $package && [[ -z $_FORCE ]]; then
                        _becho "$package already installed - skipping"
                    else
                        _becho "Installing $package..."
                        _noapm_install_${package} \
                            && _gecho "Done" \
                            || (
                                _error "Failed"
                                echo "cleaning up..."
                                _noapm_uninstall_${package}
                                _error_and_exit "Failed to install $package"
                            )
                    fi

                    if [[ ! -z $_COMPLETIONS ]]; then
                        # send both sterr and err to /dev/null
                        if type "_noapm_completions_install_${package}" > /dev/null 2>&1 ; then
                            _becho "Installing $package completions..."
                            rm -rf $(_tmp_omzsh_completions_path $package) 2> /dev/null
                            (_noapm_completions_install_${package} && _install_omzsh_completion_from_tmp $package) \
                                && (
                                    _info_at_end_of_script "To enable the $package completions plugin add '$package' to the plugins variable found in ~/.zshrc"
                                    _gecho "Done" \
                                ) \
                                || (
                                    _warn_at_end_of_script "Failed to install $package completions"
                                    _warn "Failed"
                                )
                        fi
                    fi
                    
                    if [[ ! -z $_CONFIGURE ]]; then
                        if type "_noapm_configure_${package}" > /dev/null 2>&1 ; then
                            _becho "Configuring $package..."
                            _noapm_configure_${package} \
                                && _gecho "Done" \
                                || (
                                    _warn_at_end_of_script "Failed to configure $package"
                                    _warn "Failed"
                                )
                        fi
                    fi
                else
                    _error_and_exit "No install function found for $package"
                fi
            done
            ;;

        uninstall)
            if [[ -z $_PACKAGES ]]; then
                _error "No packages specified"
                _help
                exit 1
            fi
            for package in $_PACKAGES; do
                if type "_noapm_uninstall_${package}" > /dev/null 2>&1 ; then
                    if ! _already_installed $package && [[ -z $_FORCE ]]; then
                        _becho "$package not installed, skipping"
                    else
                        _becho "Uninstalling $package..."
                        _noapm_uninstall_${package} \
                        && _gecho "Done" \
                            || _warn "Failed to uninstall $package"  # warn because it might just be it wasn't installed
                        
                    fi

                    if [[ ! -z $_COMPLETIONS ]]; then
                        if type "_noapm_completions_install_${package}" > /dev/null 2>&1 ; then
                            _becho "Uninstalling $package completions..."
                            rm  -rf $(_plugins_directory)/$package > /dev/null
                            _info_at_end_of_script "You should remove '$package' from the plugins variable found in ~/.zshrc"
                            _gecho "Done"
                        fi
                    fi

                    if [[ ! -z $_CONFIGURE ]]; then
                        if type "_noapm_unconfigure_${package}" > /dev/null 2>&1 ; then
                            _becho "Unconfiguring $package..."
                            _noapm_unconfigure_${package} \
                                && _gecho "Done" \
                                || (
                                    _warn_at_end_of_script "Failed to unconfigure $package"
                                    _warn "Failed"
                                )
                        fi
                    fi
                else
                    _error_and_exit "No uninstall function found for $package"
                fi
            done
            ;;

        self)
            if [[ ! -z $_UPDATE ]]; then
                _becho "Updating noapm..."
                # if this was called from noapm (or similar command) or a path to a file with a noapm like name, we can update
                if [[ $0 == *noapm* ]]; then
                    if [ -f $0 ]; then
                        local target=$0
                    else
                        local target=$(which noapm)
                    fi
                else
                    _error_and_exit "Failed to update noapm: could not find noapm file."
                fi
                if [ ! -f $target ]; then
                        _error_and_exit "Failed to update noapm: could not find noapm file."
                fi
                TEMP_SCRIPT=/tmp/noapm-updated
                curl -fsSL https://raw.githubusercontent.com/BaxHugh/noapm/main/noapm -o $TEMP_SCRIPT \
                && chmod +x $TEMP_SCRIPT \
                    || _error_and_exit "Failed to update noapm"

                local NEW_VERSION=$($TEMP_SCRIPT --version)
                mv $TEMP_SCRIPT $target \
                    || _error_and_exit "Failed to update noapm"
                echo -n "noapm at $target updated to version "; _gecho $NEW_VERSION
            fi
            ;;
    esac
}

_plugins_directory() {
    echo ${ZSH_CUSTOM:=$HOME/.oh-my-zsh/custom}/plugins
}


#region POETRY
_noapm_install_poetry() {
    # Poetry installer is clever enough to know if it's already installed
    curl -sSL https://install.python-poetry.org | python3 - || return 1
}

_noapm_completions_install_poetry() {
    if which poetry > /dev/null; then
        poetry completions zsh > $(_tmp_omzsh_completions_path poetry) || return 1
    else
        $HOME/.local/bin/poetry completions zsh > $(_tmp_omzsh_completions_path poetry) || return 1
    fi
}

_noapm_uninstall_poetry() {
    curl -sSL https://install.python-poetry.org | python3 - --uninstall || return 1
}
#endregion POETRY

#region DASEL
_noapm_install_dasel() {
    sudo wget https://github.com/TomWright/dasel/releases/latest/download/dasel_linux_amd64 -O /usr/local/bin/dasel \
    && sudo chmod +x /usr/local/bin/dasel
}

_noapm_uninstall_dasel() {
    sudo rm /usr/local/bin/dasel
}
#endregion DASEL

#region DOCKER
_noapm_install_docker() {
    # these steps are from 'https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-22-04'

    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null \
        || _error "Failed to add docker repository" || return 1
    sudo apt update \
        && apt-cache policy docker-ce \
        && sudo apt install $_Y docker-ce \
        || _error "Failed to install docker" || return 1


}

_noapm_uninstall_docker() {
    sudo apt remove $_Y docker-ce || _warn_at_end_of_script "docker: Failed to remove docker-ce"
}

_noapm_configure_docker() {
    # Configure docker to run without sudo
    # Add user to docker group if not in already
    if ! groups | grep -q docker; then
        echo "Adding user to docker group..."
        sudo usermod -aG docker $(whoami) || _warn_at_end_of_script "docker: Failed to add user to docker group"
    fi
    _info_at_end_of_script "To enable and start docker run 'sudo systemctl enable docker && sudo systemctl start docker'"
}

_noapm_unconfigure_docker() {
    echo "Removing user from docker group..."
    sudo usermod -G $(groups | sed -E 's/.*sudo.*//g' | sed -E 's/ /,/g') $(whoami) || _warn_at_end_of_script "docker: Failed to remove user from docker group"
}

#endregion DOCKER

#region MINICONDA
_noapm_install_conda() {    
    curl -L "https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh" -o /tmp/install-miniconda.sh
    bash /tmp/install-miniconda.sh -b -p $MINICONDA_LOCATION
}

_noapm_conda_is_installed() {
    if [[ -d $MINICONDA_LOCATION ]]; then
        return 0
    else
        return 1
    fi
}

_noapm_configure_conda() {
    iii Configure miniconda so that it doesn\'t activate base by default or change the prompts
    CONDA_CMD=$MINICONDA_LOCATION/bin/conda
    $CONDA_CMD init bash zsh \
    && echo conda config --set auto_activate_base false \
    && $CONDA_CMD config --set auto_activate_base false \
    && echo conda config --set changeps1 false \
    && $CONDA_CMD config --set changeps1 false \
    || _warn_at_end_of_script "miniconda: Failed to configure miniconda"
}

_noapm_uninstall_conda() {
    rm -rf $MINICONDA_LOCATION || _warn "Failed to remove miniconda3 directory: $MINICONDA_LOCATION"
}

_noapm_completions_install_conda() {
    git clone https://github.com/esc/conda-zsh-completion $(_tmp_omzsh_completions_path conda) || return 1
}
#endregion MINICONDA

#region MONGODB
_noapm_install_mongodb-compass() {
    wget https://downloads.mongodb.com/compass/mongodb-compass_1.37.0_amd64.deb -O /tmp/mongodb-compass.deb
    sudo dpkg -i /tmp/mongodb-compass.deb
}
_noapm_uninstall_mongodb-compass() {
    sudo apt remove $_Y mongodb-compass
}
#endregion MONGODB

#region NVM
_noapm_install_nvm() {
    # Install node version manager see https://github.com/nvm-sh/nvm
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
    # This installs oh-my-zsh completions to ~/.zshrc
}

_noapm_uninstall_nvm() {
    rm -rf $NVM_LOCATION
    # Not sure how to uninstall completions
}

_noapm_nvm_is_installed() {
    if [[ -d $NVM_LOCATION ]]; then
        return 0
    else
        return 1
    fi
}

#endregion NVM

#region PERF
_noapm_install_perf() {
    sudo apt install $_Y linux-tools-common linux-tools-generic linux-tools-$(uname -r)
}

_noapm_uninstall_perf() {
    sudo apt remove $_Y linux-tools-common linux-tools-generic linux-tools-$(uname -r)
}
#endregion PERF

#region RUST
_noapm_install_rustup() {
    # source ~/.zshenv as this will add cargo to the path
    curl --proto '=https' --tlsv1.3 https://sh.rustup.rs -sSf | sh -s -- $_Y  && . ~/.zshenv

    # To update: rustup update
    # To uninstall: rustup self uninstall
}

_noapm_completions_install_rustup() {
    local target=$(_tmp_omzsh_completions_path rustup)
    rmdir $target 2> /dev/null
    mkdir $target 2> /dev/null
    local rtn=0
    if which rustup > /dev/null; then
        rustup completions zsh rustup > $target/_rustup || local rtn=1
        rustup completions zsh cargo > $target/_cargo || local rtn=1
    else
        $HOME/.cargo/bin/rustup completions zsh rustup > $target/_rustup || local rtn=1
        $HOME/.cargo/bin/rustup completions zsh cargo > $target/_cargo || local rtn=1
    fi
    return $rtn
}

_noapm_uninstall_rustup() {
    rustup self uninstall $_Y
}
#endregion RUST

#region WINE
_noapm_install_wine() {
    if cat /etc/os-release | grep -oP "(?<=VERSION=\").*(?=\")" | grep -q 22\.04; then
        sudo dpkg --add-architecture i386 \
        && sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key \
        && sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources \
        && sudo apt update \
        && sudo apt install $_Y winehq-stable \
        || _error "Failed to install WineHQ" || return 1
    else
        _error "WineHQ is only supported on Ubuntu 22.04"
        return 1
    fi
}

_noapm_uninstall_wine() {
    sudo apt remove $_Y winehq-stable
}
#endregion WINE

#region oh-my-zsh

_noapm_install_oh-my-zsh() {
    curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh -s
}

_noapm_uninstall_oh-my-zsh() {
    rm -rf $HOME/.oh-my-zsh
}

_noapm_oh-my-zsh_is_installed() {
    _omyzsh_is_installed
}

#endregion oh-my-zsh

# We want to just source the functions for some tests in a separate script
if [[ -z $_SOURCING_FILE_FOR_TESTS ]]; then
    _main $@

    _print_warn_buffer
    _print_info_buffer
    if [[ $_COMMAND == "install" ]]; then
        _yecho "To enable completions for a command add it's name to the plugins variable found in ~/.zshrc"
        _yecho "You may need to restart your shell for changes to take effect"
    fi
fi
